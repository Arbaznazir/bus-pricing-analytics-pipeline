name: Bus Pricing Pipeline CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.9"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort

      - name: Run Black (code formatting check)
        run: black --check --diff .

      - name: Run flake8 (linting)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run isort (import sorting check)
        run: isort --check-only --diff .

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: busdb_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            sleep 1
          done

      - name: Run tests with coverage
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: busdb_test
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test]

    strategy:
      matrix:
        service: [api, etl, data_simulator, scheduler]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} Docker image
        run: |
          docker build ./${{ matrix.service }} -t bus-pricing-${{ matrix.service }}:latest

      - name: Test Docker image
        run: |
          # Basic smoke test - ensure container starts without errors
          docker run --rm --entrypoint="" bus-pricing-${{ matrix.service }}:latest python --version

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety (dependency vulnerability check)
        run: safety check --json
        continue-on-error: true

      - name: Run Bandit (security linting)
        run: bandit -r . -f json
        continue-on-error: true

  integration:
    name: Integration Test (Docker Compose)
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cp .env.example .env

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d db
          sleep 10  # Wait for database to be ready
          docker-compose up -d api
          sleep 10  # Wait for API to be ready

      - name: Test API health endpoint
        run: |
          curl -f http://localhost:8000/health || exit 1

      - name: Test API endpoints
        run: |
          # Test routes endpoint
          curl -f http://localhost:8000/routes || exit 1

          # Test operators endpoint
          curl -f http://localhost:8000/operators || exit 1

          # Test summary stats endpoint
          curl -f http://localhost:8000/stats/summary || exit 1

      - name: Check Docker Compose logs
        if: failure()
        run: |
          docker-compose logs

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # Optional: Deploy to staging (commented out for local development)
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [integration]
  #   if: github.ref == 'refs/heads/main'
  #
  #   steps:
  #   - name: Deploy to staging environment
  #     run: |
  #       echo "Deploy to staging would happen here"
  #       # Add deployment commands for your staging environment
